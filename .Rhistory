letter <- letters[i]
count <- mytable[[i]]
probabilities[i] <- count/mylength
}
# Make X random sequences using the multinomial model with probabilities "probabilities"
seqs <- numeric(X)
for (j in 1:X){
seq <- sample(letters, mylength, rep=TRUE, prob=probabilities) # Sample with replacement
seq <- c2s(seq)
seqs[j] <- seq
}
# Return the vector of random sequences
return(seqs)
}
seq_alignment(seq1, seq2, seq_type, seq_align, mat, gap, N, shuff)
## PRUEBAS
setwd("~/Desktop/MESIO/SEMESTRE 1/BIOINFORMATICS/TASKS/Task_3")
seq_alignment(seq1, seq2, seq_type, seq_align, mat, gap, N, shuff)
library(seqBio)
library(Biostrings)
seq1 <- "P0DP27.fa"
seq2 <- "Q9N1R0.fa"
seq_type ="protein"
seq_align = "local"
mat = data("BLOSUM62")
gap = c(-12, -2)
N = 1000
shuff = 2
seq_alignment(seq1, seq2, seq_type, seq_align, mat, gap, N, shuff)
setwd("~/Desktop/MESIO/SEMESTRE 1/BIOINFORMATICS/TASKS/Task_3")
library(seqBio)
library(Biostrings)
seq1 <- "P0DP27.fa"
seq2 <- "Q9N1R0.fa"
seq_type ="protein"
seq_align = "local"
mat = data("BLOSUM62")
gap = c(-12, -2)
N = 1000
shuff = 2
seq_alignment(seq1, seq2, seq_type, seq_align, mat, gap, N, shuff)
library(seqBio)
load("/Users/Laura/GitHub/Lab3/awesomelab3/data/wiki_graph.RData")
getwd()
seq1 <- "~/Desktop/MESIO/SEMESTRE 1/BIOINFORMATICS/TASKS/Task_3/P0DP27.fa"
seq2 <- "~/Desktop/MESIO/SEMESTRE 1/BIOINFORMATICS/TASKS/Task_3/Q9N1R0.fa"
seq1 <- "~/Desktop/MESIO/SEMESTRE 1/BIOINFORMATICS/TASKS/Task_3/P0DP27.fa"
seq2 <- "~/Desktop/MESIO/SEMESTRE 1/BIOINFORMATICS/TASKS/Task_3/Q9N1R0.fa"
save(data1, data2, file = "sequences.RData")
save(seq1, seq2, file = "sequences.RData")
load("/Users/Laura/Desktop/MESIO/SEMESTRE 1/BIOINFORMATICS/TASKS/Task_3/sequences.RData")
View(secuencia1)
load("/Users/Laura/Desktop/MESIO/SEMESTRE 1/BIOINFORMATICS/TASKS/Task_3/sequences.RData")
setwd("~/GitHub/Bioinformatics_Task3/seqBio/data")
seq1 <- "~/GitHub/Bioinformatics_Task3/seqBio/data/P0DP27.fa"
seq2 <- "~/GitHub/Bioinformatics_Task3/seqBio/data/Q9N1R0.fa"
s1 = readAAStringSet(seq1, "fasta")
s2 = readAAStringSet(seq2, "fasta")
View(s1)
s1
s1[[1]]
names(s1)
sub(names(s1), 3, 10)
substr(names(s1), 3, 10)
substr(names(s1), 4, 9)
substr(names(s2), 4, 9)
paste0(substr(names(s2), 4, 9), ".fa")
save(protein1, protein2, dna1, dna2, file = "~/GitHub/Bioinformatics_Task3/seqBio/data/sequences.RData")
protein1 = readDNAStringSet("P0DP27.fa", "fasta")
protein2 = readDNAStringSet("Q9N1R0.fa", "fasta")
dna1 = readAAStringSet("gi32141095_N_0.fa", "fasta")
dna2 = readAAStringSet("gi32141095_N_1.fa", "fasta")
save(protein1, protein2, dna1, dna2, file = "~/GitHub/Bioinformatics_Task3/seqBio/data/sequences.RData")
protein1 = readAAStringSet("P0DP27.fa", "fasta")
protein2 = readAAStringSet("Q9N1R0.fa", "fasta")
dna1 = readDNAStringSet("gi32141095_N_0.fa", "fasta")
## PRUEBAS
setwd("~/Desktop/MESIO/SEMESTRE 1/BIOINFORMATICS/TASKS/Task_3")
protein1 = readAAStringSet("P0DP27.fa", "fasta")
protein2 = readAAStringSet("Q9N1R0.fa", "fasta")
dna1 = readDNAStringSet("gi32141095_N_0.fa", "fasta")
dna2 = readDNAStringSet("gi32141095_N_1.fa", "fasta")
save(protein1, protein2, dna1, dna2, file = "~/GitHub/Bioinformatics_Task3/seqBio/data/sequences.RData")
dna1
names(dna1)
substr(names(dna1), 4, 9)
substr(names(dna1), 1, 11)
getwd()
setwd("~/GitHub/Bioinformatics_Task3/seqBio/data")
seq_alignment <- function (seq1, seq2, seq_type = c("protein", "dna"), seq_align = c("local", "global"), mat, gap, N, shuff = c(1, 2)){
# 1. Carga del paquete Biostrings:
if(!require('Biostrings',quietly = T)){BiocManager::install("Biostrings")}
require('Biostrings', quietly = T)
# 2. Comprobación de los inputs:
stopifnot(class(seq1) == "character", class(seq2) == "character",
seq_type %in% c("protein", "dna"), seq_align  %in% c("local", "global"),
class(gap) == "numeric", class(N) == "numeric", class(shuff) == "numeric",
length(gap) == 2, length(N) == 1, shuff %in% c(1, 2))
# 3. Lectura de las secuencias:
if(seq_type == "dna"){
s1 = readDNAStringSet(seq1, "fasta")
s2 = readDNAStringSet(seq2, "fasta")
name_mat = "DNAScoringMat"
} else{
s1 = readAAStringSet(seq1, "fasta")
s2 = readAAStringSet(seq2, "fasta")
name_mat = mat
}
# 4. Alineamiento original (óptimo):
S <- pairwiseAlignment(s1, s2, type = seq_align, substitutionMatrix = mat,
gapOpening = gap[1], gapExtension = gap[2], scoreOnly = TRUE)
# 5. Shuffling:
if(shuff == 1){
randomseqs <- generateSeqsWithMultinomialModel(as.character(s1[[1]]), N)
randomscores <- double(N)
for (i in 1:N){
score <- pairwiseAlignment(randomseqs[i], s2, type = seq_align, substitutionMatrix = mat,
gapOpening = gap[1], gapExtension = gap[2], scoreOnly = TRUE)
randomscores[i] <- score
}
} else{
randomseqs <- generateSeqsWithMultinomialModel(as.character(s2[[1]]), N)
randomscores <- double(N)
for (i in 1:N){
score <- pairwiseAlignment(s1, randomseqs[i], type = seq_align, substitutionMatrix = mat,
gapOpening = gap[1], gapExtension = gap[2], scoreOnly = TRUE)
randomscores[i] <- score
}
}
# 6. Cálculos:
### 6.1. Media y desv estándar de las puntiaciones.
x <- mean(randomscores)
s <- sd(randomscores)
### 6.2. Estimación de los parámetros de la distribución Gumbel.
lambda <- 1.2825 / s
u <- x - (0.45*s)
### 6.3. Estimación de K
m <- width(s1)
n <- width(s2)
K <- exp( (lambda*u) ) / (m*n)
### 6.4. Estandarización de la puntuación S
S_prima <- (lambda * S) - log( (K*m*n) )
### 6.5. Probabilidad que un alineamiento de secuencias al azar tenga una
###      puntuación superior a la putuación original
prob <- sum(randomscores >= S) / N
# 6. RESULTADO GRÁFICO
require("extRemes", quietly = T)
require("gplots", quietly = T)
fit0 <- fevd(randomscores, type = "Gumbel")
histo <- hist(randomscores, breaks = 20, plot= FALSE)
y <- histo$density[max(which(histo$mids <= S))]
texto <- c(gsub('.{3}$', '', seq1), gsub('.{3}$', '', seq2), seq_type, seq_align, name_mat, as.character(paste(gap[1], "y", gap[2])), N, shuff,
round(lambda,4), round(u,4), round(K,4), S, round(S_prima,4), round(prob,4))
texto <- as.data.frame(texto)
rownames(texto) <- c("Nombre secuencia 1:", "Nombre secuencia 2:", "Tipo de alineamiento:",
"Tipo de secuencia;", "Matriz de substitución",  "Puntuación Gap:",
"Número de réplicas:", "Secuencia shuffling:", "Parámetro lambda:",
"Parámetro u:", "Constante K:", "Score original:", "Score estandarizado (S'):",
"P(S')")
colnames(texto) <- " "
if(.Platform$OS.type == "unix") {
quartz(width = 10, height = 7)
} else {
windows(width = 10, height = 7)
}
par(mfrow=c(1,2), oma = c(0, 0, 2, 0))
plot(fit0, "hist", ylim=c(min(density(randomscores)$y),max(density(randomscores)$y)+0.05),
col="lightblue", lty= 1, lwd = 1, main = " ")
text(x = S, y = 0.003, labels = paste0("S=", S), cex = 0.75, font=2, col ="red")
text(x = S, y = 0.001, labels = sprintf('\u2193'), cex = 1, font=2, col ="red")
textplot(texto, valign = "top", halign = "right", cex =0.80)
title(paste("Histograma de los N =", N,"scores"), outer = TRUE, cex.main = 1.5)
# 7. REUSLTADO NUMÉRICO
cat("\n\n")
txt1 <- "Resumen numérico de las puntuaciones obtenidas al hacer shuffling:"
cat(txt1, fill = TRUE)
cat(rep("=", nchar(txt1)), sep = "", fill = TRUE)
print(summary(randomscores))
cat("\n\n")
txt2 <- "Otros resultados numéricos:"
cat(txt2, fill = TRUE)
cat(rep("=", nchar(txt2)), sep = "", fill = TRUE)
nums <- c(round(lambda,2) , round(u,2), round(K,2), round(S,2), round(S_prima,2), round(prob,2))
nums <- as.data.frame(nums)
rownames(nums) <- c("lambda", "u", "K", "S", "S'", "P(x >= S)")
colnames(nums) <- NULL
print(nums)
cat("\n\n")
}
generateSeqsWithMultinomialModel <- function(inputsequence, X){
# Change the input sequence into a vector of letters
require("seqinr", quietly = T) # This function requires the SeqinR package.
inputsequencevector <- s2c(inputsequence)
# Find the frequencies of the letters in the input sequence "inputsequencevector":
mylength <- length(inputsequencevector)
mytable <- table(inputsequencevector)
# Find the names of the letters in the sequence
letters <- rownames(mytable)
numletters <- length(letters)
probabilities <- numeric() # Make a vector to store the probabilities of letters
for (i in 1:numletters){
letter <- letters[i]
count <- mytable[[i]]
probabilities[i] <- count/mylength
}
# Make X random sequences using the multinomial model with probabilities "probabilities"
seqs <- numeric(X)
for (j in 1:X){
seq <- sample(letters, mylength, rep=TRUE, prob=probabilities) # Sample with replacement
seq <- c2s(seq)
seqs[j] <- seq
}
# Return the vector of random sequences
return(seqs)
}
library(seqBio)
library(Biostrings)
seq1 <- "P0DP27.fa"
seq2 <- "Q9N1R0.fa"
seq_type ="protein"
seq_align = "local"
mat = data("BLOSUM62")
gap = c(-12, -2)
N = 1000
shuff = 2
shuff = 1
seq_alignment(seq1, seq2, seq_type, seq_align, mat, gap, N, shuff)
mat <- nucleotideSubstitutionMatrix(match = 1, mismatch = -3, baseOnly = TRUE)
seq_alignment(seq1 = "gi32141095_N_0.fa", seq2 = "gi32141095_N_1.fa", seq_type ="dna",
seq_align = "global", mat = mat, gap = c(-2, -1), N = 100, shuff = 2)
seq_alignment(seq1 = "gi32141095_N_0.fa", seq2 = "gi32141095_N_1.fa", seq_type ="dna",
seq_align = "global", mat = mat, gap = c(-2, -1), N = 200, shuff = 2)
library(seqBio)
test <- " anything goes here, STR1 GET_ME STR2, anything goes here STR1 GET_ME2 STR2"
pattern <- "STR1\\s*(.*?)\\s*STR2"
result <- regmatches(test, regexec(pattern, test))
result
pattern <- "/\\s*(.*?)\\s*.fa"
result <- regmatches(test, regexec(pattern, test))
result
regexec(pattern, test)
x <- c("asfef", "qwerty", "yuiop[", "b", "stuff.blah.yech")
x
substring(x, 2) <- c("..", "+++")
x
t <- "Current CPU load - jvm machine[example network-app_svc_group_mem4]@server101.example.com"
sub(".*@([^.]+)\\..*", "\\1", t)
test <- "~/GitHub/Bioinformatics_Task3/seqBio/data/gi32141095_N_0.fa"
sub(".*/([^.]+)\\..*", "\\1", test)
test <- "~/GitHub/Bioinformatics_Task3/seqBio/data/gi32141095_N_0.fa"
name <- sub(".*/([^.]+)\\..*", "\\1", test)
test <- "~/GitHub/Bioinformatics_Task3/seqBio/data/P0DP27.fa"
name <- sub(".*/([^.]+)\\..*", "\\1", test)
name
library(seqBio)
devtools::install_github("laurajuliamelis/Bioinformatics_Task3", subdir="seqBio", build_vignettes=TRUE)
library(seqBio)
library(Biostrings)
browseVignettes("seqBio")
library(seqBio)
devtools::install_github("laurajuliamelis/Bioinformatics_Task3", subdir="seqBio", build_vignettes=TRUE)
library(seqBio)
browseVignettes("seqBio")
seq_alignment(seq1, seq2, seq_type, seq_align, mat, gap, N, shuff)
library(Biostrings)
seq1 <- "P0DP27.fa"
seq2 <- "Q9N1R0.fa"
seq_type ="protein"
seq_align = "local"
mat = data("BLOSUM62")
gap = c(-12, -2)
N = 1000
shuff = 1
seq_alignment(seq1, seq2, seq_type, seq_align, mat, gap, N, shuff)
library(seqBio)
?seqBio
seq_alignment(seq1, seq2, seq_type, seq_align, mat, gap, N, shuff)
library(seqBio)
library(seqBio)
devtools::install_github("laurajuliamelis/Bioinformatics_Task3", subdir="seqBio", build_vignettes=TRUE)
library(seqBio)
library(Biostrings)
browseVignettes("seqBio")
library(seqBio)
library(Biostrings)
seq1 <- "P0DP27.fa"
seq2 <- "Q9N1R0.fa"
seq_type ="protein"
seq_align = "local"
mat = data("BLOSUM62")
gap = c(-12, -2)
N = 1000
shuff = 1
seq_alignment(seq1, seq2, seq_type, seq_align, mat, gap, N, shuff)
library(seqBio)
devtools::install_github("laurajuliamelis/Bioinformatics_Task3", subdir="seqBio", build_vignettes=TRUE)
library(seqBio)
library(Biostrings)
browseVignettes("seqBio")
rm(seq_alignment())
rm(seq_alignment
)
rm(generateSeqsWithMultinomialModel)
seq_alignment(seq1, seq2, seq_type, seq_align, mat, gap, N, shuff)
seq1 <- "~/GitHub/Bioinformatics_Task3/seqBio/data/gi32141095_N_0.fa"
seq2 <- "~/GitHub/Bioinformatics_Task3/seqBio/data/gi32141095_N_1.fa"
seq_alignment(seq1 = "gi32141095_N_0.fa", seq2 = "gi32141095_N_1.fa", seq_type ="dna",
seq_align = "global", mat = mat, gap = c(-4, -1), N = 200, shuff = 2)
set.seed(100)
seq_alignment(seq1, seq2, seq_type, seq_align, mat, gap, N, shuff)
set.seed(100)
library(seqBio)
mat <- nucleotideSubstitutionMatrix(match = 1, mismatch = -3, baseOnly = TRUE)
seq_alignment(seq1 = "gi32141095_N_0.fa", seq2 = "gi32141095_N_1.fa", seq_type ="dna",
seq_align = "global", mat = mat, gap = c(-4, -1), N = 200, shuff = 2)
seq1 <- "P0DP27.fa"
seq2 <- "Q9N1R0.fa"
seq_type ="protein"
seq_align = "local"
mat = data("BLOSUM62")
gap = c(-12, -2)
N = 1000
shuff = 1
seq_alignment(seq1, seq2, seq_type, seq_align, mat, gap, N, shuff)
seq_alignment <- function (seq1, seq2, seq_type = c("protein", "dna"), seq_align = c("local", "global"), mat, gap, N, shuff = c(1, 2)){
# 1. Carga del paquete Biostrings:
if(!require('Biostrings',quietly = T)){BiocManager::install("Biostrings")}
require('Biostrings', quietly = T)
# 2. Comprobación de los inputs:
stopifnot(class(seq1) == "character", class(seq2) == "character",
seq_type %in% c("protein", "dna"), seq_align  %in% c("local", "global"),
class(gap) == "numeric", class(N) == "numeric", class(shuff) == "numeric",
length(gap) == 2, length(N) == 1, shuff %in% c(1, 2))
# 3. Lectura de las secuencias:
if(seq_type == "dna"){
s1 = readDNAStringSet(seq1, "fasta")
s2 = readDNAStringSet(seq2, "fasta")
name_mat = "DNAScoringMat"
} else{
s1 = readAAStringSet(seq1, "fasta")
s2 = readAAStringSet(seq2, "fasta")
name_mat = mat
}
# 4. Alineamiento original (óptimo):
S <- pairwiseAlignment(s1, s2, type = seq_align, substitutionMatrix = mat,
gapOpening = gap[1], gapExtension = gap[2], scoreOnly = TRUE)
# 5. Shuffling:
if(shuff == 1){
randomseqs <- generateSeqsWithMultinomialModel(as.character(s1[[1]]), N)
randomscores <- double(N)
for (i in 1:N){
score <- pairwiseAlignment(randomseqs[i], s2, type = seq_align, substitutionMatrix = mat,
gapOpening = gap[1], gapExtension = gap[2], scoreOnly = TRUE)
randomscores[i] <- score
}
} else{
randomseqs <- generateSeqsWithMultinomialModel(as.character(s2[[1]]), N)
randomscores <- double(N)
for (i in 1:N){
score <- pairwiseAlignment(s1, randomseqs[i], type = seq_align, substitutionMatrix = mat,
gapOpening = gap[1], gapExtension = gap[2], scoreOnly = TRUE)
randomscores[i] <- score
}
}
# 6. Cálculos:
### 6.1. Media y desv estándar de las puntiaciones.
x <- mean(randomscores)
s <- sd(randomscores)
### 6.2. Estimación de los parámetros de la distribución Gumbel.
lambda <- 1.2825 / s
u <- x - (0.45*s)
### 6.3. Estimación de K
m <- width(s1)
n <- width(s2)
K <- exp( (lambda*u) ) / (m*n)
### 6.4. Estandarización de la puntuación S
S_prima <- (lambda * S) - log( (K*m*n) )
### 6.5. Probabilidad que un alineamiento de secuencias al azar tenga una
###      puntuación superior a la putuación original
prob <- sum(randomscores >= S) / N
# 6. RESULTADO GRÁFICO
require("extRemes", quietly = T)
require("gplots", quietly = T)
fit0 <- fevd(randomscores, type = "Gumbel")
histo <- hist(randomscores, breaks = 20, plot= FALSE)
y <- histo$density[max(which(histo$mids <= S))]
texto <- c(sub(".*/([^.]+)\\..*", "\\1", seq1), sub(".*/([^.]+)\\..*", "\\1", seq2), seq_type, seq_align,
name_mat, as.character(paste(gap[1], "y", gap[2])), N, shuff,
round(lambda,4), round(u,4), round(K,4), S, round(S_prima,4), round(prob,4))
texto <- as.data.frame(texto)
rownames(texto) <- c("Nombre secuencia 1:", "Nombre secuencia 2:", "Tipo de alineamiento:",
"Tipo de secuencia;", "Matriz de substitución",  "Puntuación Gap:",
"Número de réplicas:", "Secuencia shuffling:", "Parámetro lambda:",
"Parámetro u:", "Constante K:", "Score original:", "Score estandarizado (S'):",
"P(x >= S)")
colnames(texto) <- " "
#  if(.Platform$OS.type == "unix") {
#    quartz(width = 10, height = 7)
#  } else {
#    windows(width = 10, height = 7)
#  }
par(mfrow=c(1,2), oma = c(0, 0, 2, 0))
plot(fit0, "hist", ylim=c(min(density(randomscores)$y),max(density(randomscores)$y)+0.05),
col="lightblue", lty= 1, lwd = 1, main = " ")
text(x = S, y = 0.003, labels = paste0("S=", S), cex = 0.75, font=2, col ="red")
text(x = S, y = 0.001, labels = sprintf('\u2193'), cex = 1, font=2, col ="red")
textplot(texto, valign = "top", halign = "right", cex =0.80)
title(paste("Histograma de los N =", N,"scores"), outer = TRUE, cex.main = 1.5)
# 7. RESULTADO NUMÉRICO
txt1 <- "Resumen numérico de las puntuaciones obtenidas al hacer shuffling:"
cat(txt1, fill = TRUE)
cat(rep("=", nchar(txt1)), sep = "", fill = TRUE)
print(summary(randomscores))
cat("\n\n")
txt2 <- "Otros resultados numéricos:"
cat(txt2, fill = TRUE)
cat(rep("=", nchar(txt2)), sep = "", fill = TRUE)
nums <- c(round(lambda,2) , round(u,2), round(K,2), round(S,2), round(S_prima,2), round(prob,2))
nums <- as.data.frame(nums)
rownames(nums) <- c("lambda", "u", "K", "S", "S'", "P(x >= S)")
colnames(nums) <- NULL
print(nums)
cat("\n\n")
}
seq_alignment(seq1 = "gi32141095_N_0.fa", seq2 = "gi32141095_N_1.fa", seq_type ="dna",
seq_align = "global", mat = mat, gap = c(-4, -1), N = 200, shuff = 2)
seq_alignment(seq1, seq2, seq_type, seq_align, mat, gap, N, shuff)
library(seqBio)
library(seqBio)
rm(seq_alignment())
rm(seq_alignment
)
devtools::install_github("laurajuliamelis/Bioinformatics_Task3", subdir="seqBio", build_vignettes=TRUE)
library(seqBio)
browseVignettes("seqBio")
seq_alignment(seq1, seq2, seq_type, seq_align, mat, gap, N, shuff)
library(seqBio)
library(seqBio)
devtools::install_github("laurajuliamelis/Bioinformatics_Task3", subdir="seqBio", build_vignettes=TRUE)
library(seqBio)
browseVignettes("seqBio")
library(seqBio)
library(seqBio)
devtools::install_github("laurajuliamelis/Bioinformatics_Task3", subdir="seqBio", build_vignettes=TRUE)
library(seqBio)
browseVignettes("seqBio")
?seqBio
?generateSeqsWithMultinomialModel
library(seqBio)
devtools::install_github("laurajuliamelis/Bioinformatics_Task3", subdir="seqBio", build_vignettes=TRUE)
library(seqBio)
browseVignettes("seqBio")
library(seqBio)
browseVignettes("seqBio")
library(seqBio)
browseVignettes("seqBio")
devtools::install_github("laurajuliamelis/Bioinformatics_Task3", subdir="seqBio", build_vignettes=TRUE)
dna1 <- "~/GitHub/Bioinformatics_Task3/seqBio/data/gi32141095_N_0.fa"
dna1 <- "~/GitHub/Bioinformatics_Task3/seqBio/data/gi32141095_N_1.fa"
protein1 <- "~/GitHub/Bioinformatics_Task3/seqBio/data/P0DP27.fa"
protein2 <- "~/GitHub/Bioinformatics_Task3/seqBio/data/Q9N1R0.fa"
s1 = readDNAStringSet(dna1, "fasta")
s2 = readDNAStringSet(dna2, "fasta")
## PRUEBAS
setwd("~/Desktop/MESIO/SEMESTRE 1/BIOINFORMATICS/TASKS/Task_3")
dna1 <- "gi32141095_N_0.fa"
dna1 <- "gi32141095_N_1.fa"
protein1 <- "P0DP27.fa"
protein2 <- "Q9N1R0.fa"
s1 = readDNAStringSet(dna1, "fasta")
library(seqBio)
library(Biostrings)
s1 = readDNAStringSet(dna1, "fasta")
s2 = readDNAStringSet(dna2, "fasta")
s1 = readAAStringSet(protein1, "fasta")
dna1 <- "gi32141095_N_0.fa"
dna2 <- "gi32141095_N_1.fa"
protein1 <- "P0DP27.fa"
protein2 <- "Q9N1R0.fa"
s1 = readDNAStringSet(dna1, "fasta")
s2 = readDNAStringSet(dna2, "fasta")
s1 = readAAStringSet(protein1, "fasta")
s2 = readAAStringSet(protein2, "fasta")
View(s1)
library(Biostrings)
"ATGCA"
x <- "ATGCA"
x
readDNAStringSet(x, "fasta")
?iris
library(seqBio)
library(seqBio)
devtools::install_github("laurajuliamelis/Bioinformatics_Task3", subdir="seqBio", build_vignettes=TRUE)
library(seqBio)
browseVignettes("seqBio")
library(seqBio)
library(seqBio)
devtools::install_github("laurajuliamelis/Bioinformatics_Task3", subdir="seqBio", build_vignettes=TRUE)
library(seqBio)
browseVignettes("seqBio")
library(seqBio)
devtools::install_github("laurajuliamelis/Bioinformatics_Task3", subdir="seqBio", build_vignettes=TRUE)
library(seqBio)
library(Biostrings)
browseVignettes("seqBio")
set.seed(123)
seq_alignment(seq1 = "gi32141095_N_0.fa", seq2 = "gi32141095_N_1.fa", seq_type ="dna",
seq_align = "global", mat = mat, gap = c(-4, -1), N = 200, shuff = 2)
library(seqBio)
library(seqBio)
library(seqBio)
install.packages("Bioinformatics_Task3")
